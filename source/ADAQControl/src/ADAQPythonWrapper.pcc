///////////////////////////////////////////////////////////////////////
//
// name: ADAQPythonWrapper.cc
// date: 17 JUL 12
// auth: Zach Hartwig
// mail: hartwig@psfc.mit.edu
// 
// desc: ADAQPythonWrapper.cc uses Boost.Python to wrap the C++ ADAQ
//       classes into a Python module. The relevent ADAQHighVoltage
//       and ADAQDigitizer class members are exposed to Python to
//       provide a seamless "native" interface to all ADAQ class
//       methods from the Python side. This has two main advantages:
//       first, it takes advantage of the extensive ADAQ libraries
//       that have already been developed to provide a more
//       transparent, higher level interface to the CAEN hardware; and
//       second, it prevents the need to expose all of the CAEN
//       libraries to Python, some of which would be non-trivial. An
//       additional benefit is that Boost.Python requires no
//       modification of the original C++ source code so the ADAQ
//       libraries can be used as is! Thus, with a very minimal amount
//       of work, the Python side "sees" and has full access to the
//       ADAQ class member functions exposed to it; the ADAQ libraries
//       take care of all the heavy coding and CAEN communication.
//
///////////////////////////////////////////////////////////////////////

// Include the entire ADAQDigitizer class declaration and definition
#include "ADAQDigitizer.hh"
#include "ADAQDigitizer.cc"

// Include the entire ADAQHighVoltage class declaration and definition
#include "ADAQHighVoltage.hh"
#include "ADAQHighVoltage.cc"

// Include necessary C++ headers and namespace
#include<vector>
using namespace std;

// Include the Python headers and namespace
#include <boost/cstdint.hpp>
#include <boost/python.hpp>
#include <boost/python/suite/indexing/vector_indexing_suite.hpp>
using namespace boost::python;

// The following Boost.Python code provides Python with the know-how
// to call overloaded class member functions. The arbitrary name
// assigned as the first argument is called below when defining the
// overloaded function in the class:
//
// First argument is a name for the exposed overloaded fuction
// Second argument is the Class::MemberFunction
// Third argument is minimum number of args to member function
// Fourth argument is maximum number of args to member function
//
// At present, the ADAQ class member functions that provide external
// access to class member data are overloaded since the old "get by
// reference" methods are (at best) being replaced with new "get by
// return" methods or (at least) both methods will live
// side-by-side. This is due in part to the difficulty of getting
// Boost.Python to work with reference passing since Python simply
// does not incorporate the ability to "pass by reference" in the same
// way as C/C++...at least not in a relatively simple
// way. Boost.Python seems to have some functionality that may provide
// this interface, but it's really messy to figure out. New "get by
// return" methods are the simple answer.
//
// Note that only the "get by return" class member functions of ADAQ
// are exposed to Python since the "get by reference" member functions
// are useless.

// Overloaded digitizer functions
BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(get_dg_register_value_python, ADAQDigitizer::GetRegisterValue, 1, 1)

// Overloaded high voltage functions
BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(get_voltage_python, ADAQHighVoltage::GetVoltage, 1, 1)
BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(get_current_python, ADAQHighVoltage::GetCurrent, 1, 1)
BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(get_power_state_python, ADAQHighVoltage::GetPowerState, 1, 1)
BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(get_polarity_python, ADAQHighVoltage::GetPolarity, 1, 1)
BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(get_temperature_python, ADAQHighVoltage::GetTemperature, 1, 1)
BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(get_hv_register_value_python, ADAQHighVoltage::GetRegisterValue, 1, 1)


// The following Boost.Python code creates a Python module named
// "pydaq" that will be placed into the libPyADAQ.so shared object
// library. Because the Python module name ("pydaq") will not be the
// same as the Python shared object library ("libPyADAQ.so") by my
// chosen convention, a symbolic link called "pydaq.so" must be
// created in a PYTHONPATH dir that links to the libPyADAQ.so shared
// object library

BOOST_PYTHON_MODULE(pydaq)
{
  // Expose the definition for converting C++ vector<uint16_t> to a
  // 1-dimensional Python list of integers
  class_< vector<uint16_t> >("uint16_t_vector")
    .def(vector_indexing_suite< vector<uint16_t> >())
    ;
 
  // Expose the definition for converting a C++
  // vector-of-vector<uint16_t>s to a 2-dimensional Python list of
  // integers
  class_< vector< vector<uint16_t> > >("uint16_t_double_vector")
    .def(vector_indexing_suite< vector< vector<uint16_t> > >())
    ;
  
  // Expose the ADAQDigitizer class member function to Python
  class_<ADAQDigitizer> ("ADAQDigitizer")

    // ADAQ functions that extend standard CAENDigitizer functions
    .def("open_link", &ADAQDigitizer::OpenLink)
    .def("close_link", &ADAQDigitizer::CloseLink)
    .def("initialize", &ADAQDigitizer::Initialize)
    .def("enable_external_trigger", &ADAQDigitizer::EnableExternalTrigger)
    .def("disable_external_trigger", &ADAQDigitizer::DisableExternalTrigger)
    .def("enable_auto_trigger", &ADAQDigitizer::EnableAutoTrigger)
    .def("disable_auto_trigger", &ADAQDigitizer::DisableAutoTrigger)
    .def("enable_sw_trigger", &ADAQDigitizer::EnableSWTrigger)
    .def("disable_sw_trigger", &ADAQDigitizer::DisableSWTrigger)
    .def("get_board_handle", &ADAQDigitizer::GetBoardHandle)
    .def("set_board_address", &ADAQDigitizer::SetBoardAddress)
    .def("get_board_address", &ADAQDigitizer::GetBoardAddress)
    .def("set_verbose", &ADAQDigitizer::SetVerbose)
    .def("get_verbose", &ADAQDigitizer::GetVerbose)
    .def("get_num_channels", &ADAQDigitizer::GetNumChannels)
    .def("get_num_bits", &ADAQDigitizer::GetNumBits)
    .def("get_min_bits", &ADAQDigitizer::GetMinBit)
    .def("get_max_bits", &ADAQDigitizer::GetMaxBit)
    .def("get_nanoseconds_per_sample", &ADAQDigitizer::GetNanosecondsPerSample)
    .def("get_millivolts_per_bit", &ADAQDigitizer::GetMillivoltsPerBit)
    .def("set_register_value", &ADAQDigitizer::SetRegisterValue)
    .def("get_register_value", static_cast< uint32_t(ADAQDigitizer::*)
	 (uint32_t)>
	 (&ADAQDigitizer::GetRegisterValue), get_dg_register_value_python())

    // Standard CAEN digitizer functions provided by the
    // CAENDigitizer-1.3.1 library
    .def("reset", &ADAQDigitizer::Reset)
    .def("send_sw_trigger", &ADAQDigitizer::SendSWTrigger)
    .def("set_sw_trigger_mode", &ADAQDigitizer::SetSWTriggerMode)
    .def("get_sw_trigger_mode", &ADAQDigitizer::GetSWTriggerMode)
    .def("set_ext_trigger_input_mode", &ADAQDigitizer::SetExtTriggerInputMode)
    .def("get_ext_trigger_input_mode", &ADAQDigitizer::GetExtTriggerInputMode)
    .def("set_channel_self_trigger", &ADAQDigitizer::SetChannelSelfTrigger)
    .def("get_channel_self_trigger", &ADAQDigitizer::GetExtTriggerInputMode)
    .def("set_post_trigger_size", &ADAQDigitizer::SetPostTriggerSize)
    .def("get_post_trigger_size", &ADAQDigitizer::GetPostTriggerSize)
    .def("set_channel_trigger_threshold", &ADAQDigitizer::SetChannelTriggerThreshold)
    .def("get_channel_trigger_threshold", &ADAQDigitizer::GetChannelTriggerThreshold)
    .def("set_group_trigger_threshold", &ADAQDigitizer::SetGroupTriggerThreshold)
    .def("get_group_trigger_threshold", &ADAQDigitizer::GetGroupTriggerThreshold)
    .def("set_group_self_trigger", &ADAQDigitizer::SetGroupSelfTrigger)
    .def("get_group_self_trigger", &ADAQDigitizer::GetGroupSelfTrigger)
    .def("set_trigger_polarity", &ADAQDigitizer::SetTriggerPolarity)
    .def("get_trigger_polarity", &ADAQDigitizer::GetTriggerPolarity)
    .def("set_channel_enable_mask", &ADAQDigitizer::SetChannelEnableMask)
    .def("get_channel_enable_mask", &ADAQDigitizer::GetChannelEnableMask)
    .def("set_group_enable_mask", &ADAQDigitizer::SetGroupEnableMask)
    .def("get_group_enable_mask", &ADAQDigitizer::GetGroupEnableMask)
    .def("set_channel_group_mask", &ADAQDigitizer::SetChannelGroupMask)
    .def("get_channel_group_mask", &ADAQDigitizer::GetChannelGroupMask)
    .def("set_channel_dc_offset", &ADAQDigitizer::SetChannelDCOffset)
    .def("get_channel_dc_offset", &ADAQDigitizer::GetChannelDCOffset)
    .def("set_group_dc_offset", &ADAQDigitizer::SetGroupDCOffset)
    .def("get_group_dc_offset", &ADAQDigitizer::GetGroupDCOffset)
    .def("set_zero_suppression_mode", &ADAQDigitizer::SetZeroSuppressionMode)
    .def("get_zero_suppression_mode", &ADAQDigitizer::GetZeroSuppressionMode)
    .def("set_channel_zs_params", &ADAQDigitizer::SetChannelZSParams)
    .def("get_channel_zs_params", &ADAQDigitizer::GetChannelZSParams)
    .def("sw_start_acquisition", &ADAQDigitizer::SWStartAcquisition)
    .def("sw_stop_acquisition", &ADAQDigitizer::SWStopAcquisition)
    .def("set_record_length", &ADAQDigitizer::SetRecordLength)
    .def("get_record_length", &ADAQDigitizer::GetRecordLength)
    .def("clear_data", &ADAQDigitizer::ClearData)
    .def("set_max_num_events_blt", &ADAQDigitizer::SetMaxNumEventsBLT)
    .def("get_max_num_events_blt", &ADAQDigitizer::GetMaxNumEventsBLT)
    .def("enable_auto_trigger", &ADAQDigitizer::EnableAutoTrigger)
    .def("disable_auto_trigger", &ADAQDigitizer::DisableAutoTrigger)
    

    ////////////////////////////////////////////////////////////////////////////////////
    //               ** WARNING : PROTOTYPE FUNCTIONS!! ** 
    //
    //      ZSH :The following wrappers are for prototype
    //      ADAQDigitizer member functions whose goal is to provide
    //      full control from the Python side over the
    //      digitization/readout portion of V1720 acquisition. The
    //      function are essentially overloaded version of the C++
    //      ADAQDigitizer functions that are used from the C++ side
    //      (which themselves wrap the CAENDigitizer C library
    //      functions (geez!) for enhanced functionality). As of 06
    //      JUL 12, they are completely untested so use with caution.

    .def("malloc_readout_buffer", &ADAQDigitizer::MallocReadoutBuffer_Python)
    .def("read_data", &ADAQDigitizer::ReadData_Python)
    .def("get_num_events", &ADAQDigitizer::GetNumEvents_Python)
    .def("get_event_info", &ADAQDigitizer::GetEventInfo_Python)
    .def("decode_event", &ADAQDigitizer::DecodeEvent_Python)
    .def("free_event", &ADAQDigitizer::FreeEvent_Python)
    .def("free_readout_buffer", &ADAQDigitizer::FreeReadoutBuffer_Python)
    .def("get_trigger_time_stamp", &ADAQDigitizer::GetTriggerTimeStamp_Python)
    .def("get_waveforms", &ADAQDigitizer::GetWaveforms_Python)
    .def("get_double_vector", &ADAQDigitizer::GetDoubleVector_Python)

    //
    ////////////////////////////////////////////////////////////////////////////////////
    ;
  
  
  // Expose the ADAQHighVoltage class member functions to Python
  class_<ADAQHighVoltage> ("ADAQHighVoltage")
    .def("open_link", &ADAQHighVoltage::OpenLink)
    .def("close_link", &ADAQHighVoltage::CloseLink)
    .def("set_to_safe_state", &ADAQHighVoltage::SetToSafeState)
    .def("print_status", &ADAQHighVoltage::PrintStatus)
    .def("set_voltage", &ADAQHighVoltage::SetVoltage)
    .def("get_voltage", static_cast< uint16_t(ADAQHighVoltage::*)
	 (int)>
	 (&ADAQHighVoltage::GetVoltage), get_voltage_python())
    .def("set_current", &ADAQHighVoltage::SetCurrent)
    .def("get_current", static_cast< uint16_t(ADAQHighVoltage::*)
	 (int)>
	 (&ADAQHighVoltage::GetCurrent), get_current_python())
    .def("set_power_on", &ADAQHighVoltage::SetPowerOn)
    .def("set_power_off", &ADAQHighVoltage::SetPowerOff)
    .def("get_power_state", static_cast< uint16_t(ADAQHighVoltage::*)
	 (int)>
	 (&ADAQHighVoltage::GetPowerState), get_power_state_python())
    .def("get_polarity", static_cast< uint16_t(ADAQHighVoltage::*)
	 (int)>
	 (&ADAQHighVoltage::GetPolarity), get_polarity_python())
    .def("get_temperature", static_cast< uint16_t(ADAQHighVoltage::*)
	 (int)>
	 (&ADAQHighVoltage::GetTemperature), get_temperature_python())
    .def("set_board_address", &ADAQHighVoltage::SetBoardAddress)
    .def("get_board_address", &ADAQHighVoltage::GetBoardAddress)
    .def("set_verbose", &ADAQHighVoltage::SetVerbose)
    .def("get_verbose", &ADAQHighVoltage::GetVerbose)
    .def("get_num_channels", &ADAQHighVoltage::GetNumChannels)
    .def("get_max_voltage", &ADAQHighVoltage::GetMaxVoltage)
    .def("get_max_current", &ADAQHighVoltage::GetMaxCurrent)
    .def("set_register_value", &ADAQHighVoltage::SetRegisterValue)
    .def("get_register_value", static_cast< uint16_t(ADAQHighVoltage::*)
	 (uint32_t)>
	 (&ADAQHighVoltage::GetRegisterValue), get_hv_register_value_python())
    ;
}

